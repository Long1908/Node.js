//jshint esversion:6
//the comment above on it's own can prevent the js file to act unpredictable when we use node modules.

const fs = require("fs"); //incorporating the file system module in to our project and now are able to use in our project.
//What can we do with the file system? ---> Answer: https://nodejs.org/api/fs.html. NOTE! : The Node.js file system module version keeps on updating so
//there maybe things implemented newly or differently. But for example we can change files, we can access local files to read or write. It is something like
//open stream for read or write in C and C++

//For example: Copy:
fs.copyFileSync("file1.txt", "file2.txt");//First input is the source and the second input is the destination. If there is no such destination then the 
//function will create one and execute the task that is given, which is copy the content of the source into the destination.
//NOTE: To use the node call and execute the js file in  console/terminal, the js file has to be in the same directory as the file we are working with.
//MORE: For now it seems like old version of the node.js module functions are still applicable for use.
//copyFileSync() is a function that rewrites the destination,not append it!!!.
